!is.na(value))
ggplot(pre_and_post_usage,
aes(x = factor(value,
levels = programming),
y = perc,
fill = key)) +
geom_bar(stat = "identity",
position = "dodge") +
geom_text(aes(label=n), size= 4, vjust=-0.25, position = position_dodge(width = 1)) +
scale_x_discrete(labels = function(x) lapply(strwrap(x,
width = 10,
simplify = FALSE),
paste,
collapse = "\n")) +
theme_classic() +
xlab("Programming Usage") +
ylab("% Respondents") +
scale_fill_discrete(name = "",
labels = c("Before Workshop", "After Workshop")) +
ggtitle("Respondents' Programming Usage Increased") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_classic(base_size = 14)
ggsave("figures/change_in_programming_usage.png")
# Get some % change values to use in the text
delta_pre_have_not_been_using <-
pre_and_post_usage %>%
filter(grepl("have", value)) %>%
spread(key, value)
delta_pre_have_not_been_using <-
round(delta_pre_have_not_been_using$perc[2] -
delta_pre_have_not_been_using$perc[1], 1)
delta_pre_daily_using <-
pre_and_post_usage %>%
filter(grepl("Daily", value)) %>%
spread(key, value)
delta_pre_daily_using <-
round(delta_pre_daily_using$perc[2] -
delta_pre_daily_using$perc[1], 1)
# The code below from Ben provides a chi-square plot of the pre/post residuals
pre_and_post_test <-
pre_and_post_usage %>%
select(-perc) %>%
spread(value, n) %>%
ungroup()
# chi-sq test
pre_and_post_test_result <-
chisq.test(pre_and_post_test[ , !names(pre_and_post_test) == 'key'])
# standardised residuals
stdres <- data.frame(t(pre_and_post_test_result$stdres))
names(stdres) <- pre_and_post_test$key
stdres$freq <- row.names(stdres)
# just show post-workshop
stdres <- stdres[, c(2,3)]
names(stdres) <- rev(c("Frequency", "Residual"))
# large positive residuals means there were more xxx than the hypothesis of independence predicts. Where are our large +ve residuals?
# Contribution in percentage (%)
# The contribution (in %) of a given cell to the total Chi-square score is calculated as follows:
contrib <- 100 * pre_and_post_test_result$residuals^2 / pre_and_post_test_result$statistic
# scale 0 to 1 to use as alpha
range0to1 <- function(x){(x-min(x))/(max(x)-min(x))}
# reorder to match order of programming factor
contrib_0_to_1 <- as.vector(range0to1(contrib))[c(3,5,9,7,11,1)]
# colour +ve and -ve values
# http://stackoverflow.com/a/12910865/1036500
stdres$sign = ifelse(stdres$Residual >= 0,
"positive",
"negative")
# get the categories in a sensible order
ggplot(stdres,
aes(factor(Frequency,
levels = programming),
Residual,
fill = sign)) +
geom_col(position = "dodge",
aes(alpha = contrib_0_to_1)) +
xlab("") +
ylab("Chi-square standardized residuals of\npost-workshop frequencies") +
scale_x_discrete(labels = function(x) lapply(strwrap(x, width = 10, simplify = FALSE), paste, collapse = "\n")) +
scale_fill_manual(name = "",
values = c("negative" = "red",
"positive" = "blue"),
labels = c("Fewer respondents than \nexpected assuming no effect",
"More respondents than \nexpected assuming no effect")) +
ggtitle("Workshops result in respondents \nprogramming significantly more often") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_classic(base_size = 14) +
scale_alpha_continuous("Contribution to \nchi-square value") +
guides(fill=guide_legend(
keywidth = 0.1,
keyheight = 0.4,
default.unit = "inch")
)
ggsave("figures/programming_post_workshop.png")
# Heat map for Likert items (perception of workshop impact)
cols_with_Agree <- map_lgl(data, ~`%in%`("Agree", .x))
data_agree <-  data[ , cols_with_Agree]
levels = c("Strongly disagree", "Disagree", "Neutral", "Agree", "Strongly agree")
# Beth's tip to both order the factors based on levels and unify the factors
factorfunction <- function(mydata, factlevel){
factor(mydata,
levels=factlevel,
ordered = TRUE)
fct_unify(mydata,
levels=factlevel)}
# End tip
data_agree_likert <- likert(data.frame(lapply(data_agree, factor, levels, ordered=FALSE)))
# Kari's code for a heat mapy of workshop impact
title <- "Perception of Workshop Impact"
plot(data_agree_likert, type =c("heat"), panel.arrange = NULL, panel.strip.color = "red", legend.position = "bottom") + ggtitle(title)
# The plot works, but the labels are not in the correct order.
ggsave("figures/workshop_impact_heatmap.png")
# Code for behaviors adopted
# Responses are in columns 'Behaviors-Adopted' through 'Column32'
# Use 'gather' to go from wide to long format
Behaviors <-
data %>%
select(`Behaviors-Adopted`:Column32) %>%
gather(col, Behaviors) %>%
group_by(Behaviors) %>%
tally(Behaviors) %>%
#tally_and_perc(Behaviors, na.rm = TRUE) %>%
filter(!is.na(Behaviors)) %>%
arrange(desc(n))
# Code for behaviors adopted
# Responses are in columns 'Behaviors-Adopted' through 'Column32'
# Use 'gather' to go from wide to long format
Behaviors <-
data %>%
select(`Behaviors-Adopted`:Column32) %>%
gather(col, Behaviors) %>%
group_by(Behaviors) %>%
tally_and_perc(Behaviors, na.rm = TRUE) %>%
filter(!is.na(Behaviors)) %>%
arrange(desc(n))
print(Behaviors, digits = getOption("digits"), quote = FALSE,
na.print = "", zero.print = "0", justify = "none")
#  how many rate either of these?
#- data management and project organization practices : Behaviors-Adopted
#- used programming languages for automation : Column28
#- used version control to manage code : Column30
Behaviors_Adopted <-   select(data, `Behaviors-Adopted`:Column32)
Behaviors_Adopted <- data.frame(apply(Behaviors_Adopted, 2, function(x) ifelse(x == "NA", 0, 1)))
relevant_cols <- c("Behaviors.Adopted", "Column28", "Column30")
Behaviors_Adopted <- Behaviors_Adopted[, names(Behaviors_Adopted) %in% relevant_cols]
number_that_adopted_any_of_those_three <- sum(ifelse(rowSums(Behaviors_Adopted, na.rm = TRUE) >= 1, 1, 0))
# Code for behaviors adopted
# Responses are in columns 'Behaviors-Adopted' through 'Column32'
# Use 'gather' to go from wide to long format
Behaviors <-
data %>%
select(`Behaviors-Adopted`:Column32) %>%
gather(col, Behaviors) %>%
group_by(Behaviors) %>%
tally_and_perc(Behaviors, na.rm = TRUE) %>%
filter(!is.na(Behaviors)) %>%
arrange(desc(n))
print(Behaviors, digits = getOption("digits"), quote = FALSE,
na.print = "", zero.print = "0", justify = "none")
#  how many rate either of these?
#- data management and project organization practices : Behaviors-Adopted
#- used programming languages for automation : Column28
#- used version control to manage code : Column30
Behaviors_Adopted <-   select(data, `Behaviors-Adopted`:Column32)
Behaviors_Adopted <- data.frame(apply(Behaviors_Adopted, 2, function(x) ifelse(x == "NA", 0, 1)))
relevant_cols <- c("Behaviors.Adopted", "Column28", "Column30")
Behaviors_Adopted <- Behaviors_Adopted[, names(Behaviors_Adopted) %in% relevant_cols]
number_that_adopted_any_of_those_three <- sum(ifelse(rowSums(Behaviors_Adopted, na.rm = TRUE) >= 1, 1, 0))
kable(Behaviors, format = "markdown", digits = getOption("digits"), row.names = NA, col.names = NA,
caption = NULL, format.args = list(), escape = TRUE)
getwd
getwd()
setwd("/Users/kariljordan/Data_Carpentry/my-forked-repos/assessment-projects/data-carpentry-projects/only-postworkshop-analysis/")
library(knitr)
opts_chunk$set(echo = FALSE,
message = FALSE,
warning = FALSE)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(tidyr)
library(readr)
library(purrr)
library(tibble)
library(DBI)
library(ggmap)
library(likert)
library(mapproj)
library(RColorBrewer)
library(srvyr)
#Subsetting a portion of the Likert items from Organize-Data to Use-command-line
myvars <- c("Organize-Data", "Use-OpenRefine", "Import-Python", "Import-R", "Visualizations-in-Python", "Visualizations-in-R", "Construct-SQL", "Use-command-line")
newdata <- data[myvars]
library(knitr)
opts_chunk$set(echo = FALSE,
message = FALSE,
warning = FALSE)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(tidyr)
library(readr)
library(purrr)
library(tibble)
library(DBI)
library(ggmap)
library(likert)
library(mapproj)
library(RColorBrewer)
library(srvyr)
data <- readr::read_csv("https://raw.githubusercontent.com/carpentries/assessment-projects/master/data-carpentry-projects/only-postworkshop-analysis/postworkshop_public_archived.csv")
# Function that makes a table of counts and percentages
tally_and_perc <- function(df, colname, na.rm = FALSE){
quo_colname <- enquo(colname)
df %>%
group_by(!!quo_colname) %>%
tally() %>%
filter(if_else(rep(na.rm, nrow(.)),
!is.na(!!quo_colname),
as.logical(rep(1, nrow(.))))) %>%
mutate(`%` = round(n / sum(n) * 100, 1))
}
# Code chunk for Status
status = c("Undergraduate student", "Graduate student", "Post-doc", "Faculty", "Industry", "Academic Research Staff", "Other (please specify)")
status = factor(status)
data$Status = factor(data$Status, levels = status)
data_status_tally <-
data %>%
group_by(Status) %>%
tally() %>%
filter(!is.na(Status))
ggplot(data_status_tally,
aes(Status, y = 100 * (n/sum(n)),
n)) +
geom_bar(stat = "identity", fill="orange") +
geom_text(aes(label=n), size= 4) +
scale_x_discrete(labels = function(x) lapply(strwrap(x, width = 10, simplify = FALSE), paste, collapse="\n")) +
theme_classic() +
xlab("Status") +
ylab("% Respondents") +
ggtitle("Majority of Respondents were Graduate Students") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_classic(base_size = 14)
ggsave("figures/postworkshop_stats.png")
data %>%
tally_and_perc(`Status`, na.rm = TRUE) %>%
kable()
# Code chunk for Involvement
involvement = c("Somewhat involved", "Very involved", "Enthusiastically involved")
involvement = factor(involvement)
data$Involvement = factor(data$Involvement, levels = involvement)
data_involvement_tally <-
data %>%
group_by(Involvement) %>%
tally() %>%
filter(!is.na(Involvement))
ggplot(data_involvement_tally,
aes(Involvement, y = 100 * (n/sum(n)),
n)) +
geom_bar(stat = "identity", fill="orange") +
geom_text(aes(label=n), size= 4) +
scale_x_discrete(labels = function(x) lapply(strwrap(x, width = 10, simplify = FALSE), paste, collapse="\n")) +
theme_classic() +
xlab("Involvement") +
ylab("% Respondents") +
ggtitle("Majority of Respondents were very involved in the workshop") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_classic(base_size = 14)
ggsave("figures/postworkshop_involvement.png")
data %>%
tally_and_perc(`Involvement`, na.rm = TRUE) %>%
kable()
# Code chunk for Practical Knowledge
practical_knowledge = c("A great deal", "Some practical knowledge", "None")
practical_knowledge = factor(practical_knowledge)
data$`Practical-Knowledge` = factor(data$`Practical-Knowledge`, levels = practical_knowledge)
data_practical_knowledge_tally <-
data %>%
group_by(`Practical-Knowledge`) %>%
tally() %>%
filter(!is.na(`Practical-Knowledge`))
ggplot(data_practical_knowledge_tally,
aes(`Practical-Knowledge`, y = 100 * (n/sum(n)),
n)) +
geom_bar(stat = "identity", fill="orange") +
geom_text(aes(label=n), size= 4) +
scale_x_discrete(labels = function(x) lapply(strwrap(x, width = 10, simplify = FALSE), paste, collapse="\n")) +
theme_classic() +
xlab("Practical Knowledge") +
ylab("% Respondents") +
ggtitle("Majority of Respondents learned a great deal") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_classic(base_size = 14)
ggsave("figures/postworkshop_knowledge.png")
data %>%
tally_and_perc(`Practical-Knowledge`, na.rm = TRUE) %>%
kable()
#Subsetting a portion of the Likert items from Organize-Data to Use-command-line
myvars <- c("Organize-Data", "Use-OpenRefine", "Import-Python", "Import-R", "Visualizations-in-Python", "Visualizations-in-R", "Construct-SQL", "Use-command-line")
newdata <- data[myvars]
cols_with_Agree <- map_lgl(newdata, ~`%in%`("Agree", .x))
newdata_agree <-  newdata[ , cols_with_Agree]
levels = c("Strongly disagree",
"Disagree",
"Neutral",
"Agree",
"Strongly Agree",
"NA/Not covered at this workshop")
factorfunction <- function(newdata, factlevel){
factor(newdata,
levels=factlevel,
ordered = TRUE)
fct_unify(newdata,
levels=factlevel)}
newdata_agree_likert <- likert(data.frame(lapply(newdata_agree, factor, levels, ordered=TRUE)))
title <- "Post-workshop: Better understanding of how to..."
theme_update(plot.title = element_text(hjust = 0.5))
plot(newdata_agree_likert) + ggtitle(title)
title <- "Perception of Workshop Impact"
plot(newdata_agree_likert, type =c("heat"), panel.arrange = NULL, panel.strip.color = "red", legend.position = "bottom") + ggtitle(title)
#Subsetting a portion of the Likert items from Application to Recommend
newvars <- c("Application", "Worth-My-Time", "Material", "Recommend")
newdata2 <- data[newvars]
cols_with_Agree <- map_lgl(newdata2, ~`%in%`("Agree", .x))
newdata2_agree <-  newdata2[ , cols_with_Agree]
levels = c("Strongly disagree",
"Disagree",
"Neutral",
"Agree",
"Strongly Agree")
factorfunction <- function(newdata2, factlevel){
factor(newdata2,
levels=factlevel,
ordered = TRUE)
fct_unify(newdata2,
levels=factlevel)}
newdata2_agree_likert <- likert(data.frame(lapply(newdata2_agree, factor, levels, ordered=TRUE)))
title <- "Perception of Workshop Overall"
theme_update(plot.title = element_text(hjust = 0.5))
plot(newdata2_agree_likert) + ggtitle(title)
#Subsetting a portion of the Likert items from Instructors-Clear-Answers to Instructors-Enthusiastic
updatedvars <- c("Instructors-Clear-Answers", "Instructors-Considerate", "Instructors-Effective", "Instructors-Enthusiastic")
newdata3 <- data[updatedvars]
cols_with_Agree <- map_lgl(newdata3, ~`%in%`("Always", .x))
newdata3_agree <-  newdata3[ , cols_with_Agree]
levels = c("Never",
"Sometimes",
"Usually",
"Most of the time",
"Always")
factorfunction <- function(newdata3, factlevel){
factor(newdata3,
levels=factlevel,
ordered = TRUE)
fct_unify(newdata3,
levels=factlevel)}
newdata3_agree_likert <- likert(data.frame(lapply(newdata3_agree, factor, levels, ordered=TRUE)))
title <- "Perception of Workshop Instructors"
theme_update(plot.title = element_text(hjust = 0.5))
plot(newdata3_agree_likert) + ggtitle(title)
#Subsetting a portion of the Likert items from Organize-Data to Use-command-line
myvars <- c("Organize-Data", "Use-OpenRefine", "Import-Python", "Import-R", "Visualizations-in-Python", "Visualizations-in-R", "Construct-SQL", "Use-command-line")
newdata <- data[myvars]
cols_with_Agree <- map_lgl(newdata, ~`%in%`("Agree", .x))
newdata_agree <-  newdata[ , cols_with_Agree]
levels = c("Strongly disagree",
"Disagree",
"Neutral",
"Agree",
"Strongly Agree",
"NA/Not covered at this workshop")
factorfunction <- function(newdata, factlevel){
factor(newdata,
levels=factlevel,
ordered = TRUE)
fct_unify(newdata,
levels=factlevel)}
newdata_agree_likert <- likert(data.frame(lapply(newdata_agree, factor, levels, ordered=TRUE)))
title <- "Post-workshop: Better understanding of how to..."
theme_update(plot.title = element_text(hjust = 0.5))
plot(newdata_agree_likert) + ggtitle(title)
ggsave("figures/postworkshop_perception_likert.png")
title <- "Perception of Workshop Impact"
plot(newdata_agree_likert, type =c("heat"), panel.arrange = NULL, panel.strip.color = "red", legend.position = "bottom") + ggtitle(title)
ggsave("figures/postworkshop_perception_heat.png")
#Subsetting a portion of the Likert items from Application to Recommend
newvars <- c("Application", "Worth-My-Time", "Material", "Recommend")
newdata2 <- data[newvars]
cols_with_Agree <- map_lgl(newdata2, ~`%in%`("Agree", .x))
newdata2_agree <-  newdata2[ , cols_with_Agree]
levels = c("Strongly disagree",
"Disagree",
"Neutral",
"Agree",
"Strongly Agree")
factorfunction <- function(newdata2, factlevel){
factor(newdata2,
levels=factlevel,
ordered = TRUE)
fct_unify(newdata2,
levels=factlevel)}
newdata2_agree_likert <- likert(data.frame(lapply(newdata2_agree, factor, levels, ordered=TRUE)))
#Likert plot
title <- "Perception of Workshop Overall"
theme_update(plot.title = element_text(hjust = 0.5))
plot(newdata2_agree_likert) + ggtitle(title)
ggsave("figures/postworkshop_overallperception_likert.png")
#Heatmap
title <- "Perception of Workshop Impact"
plot(newdata2_agree_likert, type =c("heat"), panel.arrange = NULL, panel.strip.color = "red", legend.position = "bottom") + ggtitle(title)
ggsave("figures/postworkshop_overallperception_heat.png")
instructors = read.csv("/Users/kariljordan/Data_Carpentry/my-forked-repos/mentoring-program/Communications/test.csv", stringsAsFactors = FALSE)
View(instructors)
# Script to send mail to a list of email addresses
# with "Dear X" filled in with person's name
# For more details see: https://github.com/jennybc/send-email-with-r
instructors = read.csv("/Users/kariljordan/Data_Carpentry/my-forked-repos/mentoring-program/Communications/test.csv", stringsAsFactors = FALSE)
for(i in 1:nrow(instructors)) {
name = instructors[i, "FIRSTNAME"]
instructors$first_name[i] = strsplit(name, " ")[[1]][1]
}
#if gmailr is not already installed do:
#install.packages("gmailr")
library(gmailr)
for(i in 1:nrow(instructors)) {
name = paste0(instructors$FIRSTNAME[i], ",")
address = instructors$Email[i]
mentoring_email = mime(
To = address,
From = "kariljordan@carpentries.org",
Subject = "Invitation to join the Carpentries Mentoring Program",
body = paste("Dear", name, "
Welcome, and thank you for joining the Software and Data Carpentry community! We are delighted that you share our vision of bringing computational and data literacy to the global research community.
We invite you to join our Mentoring Program. In this short-term program, we match instructors with experienced community members who can answer questions you have about the Carpentries related to teaching, lesson maintenance, organizing workshops, and community building. If possible, we will try to match you with people close by to help strengthen your local Carpentries community.
Your Mentor will hold regular meetings with your Mentoring group (these are usually small - around 4-5 people) to help prepare you to teach or to maintain lessons, depending on which group you sign up for. Mentors might hold practice teaching sessions or Q&A sessions on lesson content. They may walk through workshop logistics or help you create workshop websites. Each group will work differently as the mentor will try to meet the needs of individual groups.
We strongly encourage you to take advantage of this Mentoring Program. If you are interested in joining, please sign up via this Google form [1].
Mentors are dedicated, experienced instructors who are committed to helping you become engaged members of the Carpentries’ community. We are confident that you will benefit from their experience. Spaces in the program are limited, so please sign up as soon as you can. The deadline for applications is October 16th.
Still not sure? We will be offering an information session on Monday, October 2nd at 22:00 UTC. You can bring any questions you have to that session. All the details of time zone conversion and how to connect are on this Etherpad [2].
We look forward to having you in the program!
Regards
Kari L. Jordan and Belinda Weaver
[1] https://goo.gl/forms/cLZr1vUGqWSi83HZ2
[2] http://pad.software-carpentry.org/mentorship-info ")
)
send_message(mentoring_email)
getwd()
getwd()
# Script to send mail to a list of email addresses
# with "Dear X" filled in with person's name
# For more details see: https://github.com/jennybc/send-email-with-r
instructors = read.csv("/Users/kariljordan/Data_Carpentry/my-forked-repos/mentoring-program/Communications/test.csv", stringsAsFactors = FALSE)
for(i in 1:nrow(instructors)) {
name = instructors[i, "FIRSTNAME"]
instructors$first_name[i] = strsplit(name, " ")[[1]][1]
}
#if gmailr is not already installed do:
install.packages("gmailr")
library(gmailr)
for(i in 1:nrow(instructors)) {
name = paste0(instructors$FIRSTNAME[i], ",")
address = instructors$Email[i]
mentoring_email = mime(
To = address,
From = "kariljordan@carpentries.org",
Subject = "Invitation to join the Carpentries Mentoring Program",
body = paste("Dear", name, "
Welcome, and thank you for joining the Software and Data Carpentry community! We are delighted that you share our vision of bringing computational and data literacy to the global research community.
We invite you to join our Mentoring Program. In this short-term program, we match instructors with experienced community members who can answer questions you have about the Carpentries related to teaching, lesson maintenance, organizing workshops, and community building. If possible, we will try to match you with people close by to help strengthen your local Carpentries community.
Your Mentor will hold regular meetings with your Mentoring group (these are usually small - around 4-5 people) to help prepare you to teach or to maintain lessons, depending on which group you sign up for. Mentors might hold practice teaching sessions or Q&A sessions on lesson content. They may walk through workshop logistics or help you create workshop websites. Each group will work differently as the mentor will try to meet the needs of individual groups.
We strongly encourage you to take advantage of this Mentoring Program. If you are interested in joining, please sign up via this Google form [1].
Mentors are dedicated, experienced instructors who are committed to helping you become engaged members of the Carpentries’ community. We are confident that you will benefit from their experience. Spaces in the program are limited, so please sign up as soon as you can. The deadline for applications is October 16th.
Still not sure? We will be offering an information session on Monday, October 2nd at 22:00 UTC. You can bring any questions you have to that session. All the details of time zone conversion and how to connect are on this Etherpad [2].
We look forward to having you in the program!
Regards
Kari L. Jordan and Belinda Weaver
[1] https://goo.gl/forms/cLZr1vUGqWSi83HZ2
[2] http://pad.software-carpentry.org/mentorship-info ")
)
send_message(mentoring_email)
}
# Script to send mail to a list of email addresses
# with "Dear X" filled in with person's name
# For more details see: https://github.com/jennybc/send-email-with-r
instructors = read.csv("/Users/kariljordan/Data_Carpentry/my-forked-repos/mentoring-program/Communications/test.csv", stringsAsFactors = FALSE)
for(i in 1:nrow(instructors)) {
name = instructors[i, "FIRSTNAME"]
instructors$first_name[i] = strsplit(name, " ")[[1]][1]
}
#if gmailr is not already installed do:
install.packages("gmailr")
library(gmailr)
for(i in 1:nrow(instructors)) {
name = paste0(instructors$FIRSTNAME[i], ",")
address = instructors$Email[i]
mentoring_email = mime(
To = address,
From = "kariljordan@carpentries.org",
Subject = "Invitation to join the Carpentries Mentoring Program",
body = paste("Dear", name, "
Welcome, and thank you for joining the Software and Data Carpentry community! We are delighted that you share our vision of bringing computational and data literacy to the global research community.
We invite you to join our Mentoring Program. In this short-term program, we match instructors with experienced community members who can answer questions you have about the Carpentries related to teaching, lesson maintenance, organizing workshops, and community building. If possible, we will try to match you with people close by to help strengthen your local Carpentries community.
Your Mentor will hold regular meetings with your Mentoring group (these are usually small - around 4-5 people) to help prepare you to teach or to maintain lessons, depending on which group you sign up for. Mentors might hold practice teaching sessions or Q&A sessions on lesson content. They may walk through workshop logistics or help you create workshop websites. Each group will work differently as the mentor will try to meet the needs of individual groups.
We strongly encourage you to take advantage of this Mentoring Program. If you are interested in joining, please sign up via this Google form [1].
Mentors are dedicated, experienced instructors who are committed to helping you become engaged members of the Carpentries’ community. We are confident that you will benefit from their experience. Spaces in the program are limited, so please sign up as soon as you can. The deadline for applications is October 16th.
Still not sure? We will be offering an information session on Monday, October 2nd at 22:00 UTC. You can bring any questions you have to that session. All the details of time zone conversion and how to connect are on this Etherpad [2].
We look forward to having you in the program!
Regards
Kari L. Jordan and Belinda Weaver
[1] https://goo.gl/forms/cLZr1vUGqWSi83HZ2
[2] http://pad.software-carpentry.org/mentorship-info ")
)
send_message(mentoring_email)
}
