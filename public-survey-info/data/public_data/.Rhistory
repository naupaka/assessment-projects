filter(!is.na(Material)) %>%
#BM# remove column with no name on the plot
filter(Material != "") %>%
arrange(desc(n))
ggplot(data_material_tally,
aes(reorder(Material, n),
n)) +
geom_bar(stat = 'identity') +
xlab("Material Matched Description") +
ylab("n") +
coord_flip() +
theme_bw(base_size = 14)
data_recommend_tally <-
data %>%
group_by(Recommend) %>%
tally() %>%
filter(!is.na(Recommend)) %>%
#BM# remove column with no name on the plot
filter(Recommend != "") %>%
arrange(desc(n))
ggplot(data_recommend_tally,
aes(reorder(Recommend, n),
n)) +
geom_bar(stat = 'identity') +
xlab("Would Recommend") +
ylab("n") +
coord_flip() +
theme_bw(base_size = 14)
data_worth_tally <-
data %>%
group_by(Worth) %>%
tally() %>%
filter(!is.na(Worth)) %>%
#BM# remove column with no name on the plot
filter(Worth != "") %>%
arrange(desc(n))
ggplot(data_worth_tally,
aes(reorder(Worth, n),
n)) +
geom_bar(stat = 'identity') +
xlab("Workshop Worth My Time") +
ylab("n") +
coord_flip() +
theme_bw(base_size = 14)
table(data$Pace)
data_pace_tally <-
data %>%
group_by(Pace) %>%
tally() %>%
filter(!is.na(Pace)) %>%
#BM# remove column with no name on the plot
filter(Pace != "") %>%
arrange(desc(n))
ggplot(data_pace_tally,
aes(reorder(Pace, n),
n)) +
geom_bar(stat = 'identity') +
xlab("Workshop Pace") +
ylab("n") +
coord_flip() +
theme_bw(base_size = 14)
table(data$Balance)
data_balance_tally <-
data %>%
group_by(Balance) %>%
tally() %>%
filter(!is.na(Balance)) %>%
#BM# remove column with no name on the plot
filter(Balance != "") %>%
arrange(desc(n))
ggplot(data_balance_tally,
aes(reorder(Balance, n),
n)) +
geom_bar(stat = 'identity') +
xlab("Balance of Lecture to Hands-On") +
ylab("n") +
coord_flip() +
theme_bw(base_size = 14)
table(data$Enough.Helpers)
library(likert)
library(purrr)
cols_with_Agree <- map_lgl(data, ~`%in%`("Agree", .x))
data_agree <-  data[ , cols_with_Agree]
# BM # convert to factor
data_agree <- map_if(data_agree,
is.character,
as.factor)
data_agree_likert <-  likert(as.data.frame(data_agree))
plot(data_agree_likert)
data <- read.csv("swc_postworkshop_data_archived_scrubbedMarch2017.csv", na.strings = "")
data <- read.csv("swc_postworkshop_data_archived_scrubbedMarch2017.csv", na.strings = "")
data <- read.csv("swc_postworkshop_data_archived_scrubbedMarch2017.csv", na.strings = "")
setwd ("/Users/kariljordan/Data_Carpentry/fork/public-survey-info/data/public_data/")
data <- read.csv("swc_postworkshop_data_archived_scrubbedMarch2017.csv", na.strings = "")
setwd ("/Users/kariljordan/Data_Carpentry/fork/public-survey-info/data/public_data/")
setwd ("/Users/kariljordan/Data_Carpentry/fork/public-survey-info")
data <- read.csv("data/public_data/swc_postworkshop_data_archived_scrubbedMarch2017.csv", na.strings = "")
data <- read.csv("/data/public_data/swc_postworkshop_data_archived_scrubbedMarch2017.csv", na.strings = "")
setwd ("/Users/kariljordan/Data_Carpentry/fork/public-survey-info")
data <- read.csv("/data/public_data/swc_postworkshop_data_archived_scrubbedMarch2017.csv", na.strings = "")
setwd ("/Users/kariljordan/Data_Carpentry/fork/public-survey-info")
data <- read.csv("/data/public_data/swc_postworkshop_data_archived_scrubbedMarch2017.csv", na.strings = "")
setwd ("/Users/kariljordan/Data_Carpentry/fork/public-survey-info/data/public_data")
data <- read.csv("swc_postworkshop_data_archived_scrubbedMarch2017.csv", na.strings = "")
data <- read.csv("./swc_postworkshop_data_archived_scrubbedMarch2017.csv", na.strings = "")
data <- read.csv("swc_postworkshop_data_archived_scrubbedMarch2017.csv", na.strings = "")
setwd ("/Users/kariljordan/Data_Carpentry/fork/public-survey-info/data/public_data")
setwd ("/Users/kariljordan/Data_Carpentry/fork/public-survey-info/documents/reports")
data <- read.csv("swc_postworkshop_data_archived_scrubbedMarch2017.csv", na.strings = "")
data <- read.csv("Users/kariljordan/Data_Carpentry/fork/public-survey-info/data/public_data/swc_postworkshop_data_archived_scrubbedMarch2017.csv", na.strings = "")
setwd ("/Users/kariljordan/Data_Carpentry/fork/public-survey-info/documents/reports")
data <- read.csv("swc_postworkshop_data_archived_scrubbedMarch2017.csv", na.strings = "")
View(data)
table(data$Status)
table(data$Research.Domain)
table(data$Gender)
plot(data$Gender)
table(data$Status)
table(data$Gender)
table(data$Research.Domain)
table(data$Status)
plot(data$Status)
table(data$Status)
table(data$Research.Domain)
# BM # find the cols with 'agree' etc
cols_with_Agree <- map_lgl(data, ~`%in%`("Agree", .x))
data_agree <-  data[ , cols_with_Agree]
# BM # convert to factor
data_agree <- map_if(data_agree,
is.character,
as.factor)
# BM # plot
data_agree_likert <-  likert(as.data.frame(data_agree))
plot(data_agree_likert)
library(likert)
library(purrr)
cols_with_Agree <- map_lgl(data, ~`%in%`("Agree", .x))
data_agree <-  data[ , cols_with_Agree]
data_agree <- map_if(data_agree,
is.character,
as.factor)
data_agree_likert <-  likert(as.data.frame(data_agree))
plot(data_agree_likert)
cols_with_Agree <- map_lgl(data, ~`%in%`("Agree", .x))
data_agree <-  data[ , cols_with_Agree]
# BM # convert to factor
data_agree <- map_if(data_agree,
is.character,
as.factor)
# BM # plot
data_agree_likert <-  likert(as.data.frame(data_agree))
plot(data_agree_likert)
library(likert)
library(purrr)
cols_with_Agree <- map_lgl(data, ~`%in%`("Agree", .x))
data_agree <-  data[ , cols_with_Agree]
data_agree <- map_if(data_agree,
is.character,
as.factor)
title <- "Learner Perception of Workshop Content & Atmosphere"
data_agree_likert <-  likert(as.data.frame(data_agree))
plot(data_agree_likert, cenetered = TRUE) + ggtitle(title)
cols_with_Often <- map_lgl(data, ~`%in%`("Often", .x))
data_often <-  data[ , cols_with_Often]
# BM # convert to factor
data_often <- map_if(data_often,
is.character,
as.factor)
# BM # plot
data_often_likert <-  likert(as.data.frame(data_often))
plot(data_often_likert)
cols_with_Often <- map_lgl(data, ~`%in%`("Often", .x))
data_often <-  data[ , cols_with_Often]
# BM # convert to factor
data_often <- map_if(data_often,
is.character,
as.factor)
# BM # plot
data_often_likert <-  likert(as.data.frame(data_often))
plot(data_often_likert)
cols_with_Little <- map_lgl(data, ~`%in%`("Little or no knowledge of topic", .x))
data_little <-  data[ , cols_with_Little]
# BM # convert to factor
data_little <- map_if(data_little,
is.character,
as.factor)
# BM # plot
data_little_likert <-  likert(as.data.frame(data_little))
plot(data_little_likert)
library(likert)
library(purrr)
cols_with_Agree <- map_lgl(data, ~`%in%`("Agree", .x))
data_agree <-  data[ , cols_with_Agree]
data_agree <- map_if(data_agree,
is.character,
as.factor)
title <- "Learner Perception of Workshop Content & Atmosphere"
data_agree_likert <-  likert(as.data.frame(data_agree))
theme_update(plot.title = element_text(hjust = 0.5))
plot(data_agree_likert) + ggtitle(title)
cols_with_Little <- map_lgl(data, ~`%in%`("Little or no knowledge of topic", .x))
data_little <-  data[ , cols_with_Little]
# BM # convert to factor
data_little <- map_if(data_little,
is.character,
as.factor)
# BM # plot
data_little_likert <-  likert(as.data.frame(data_little))
plot(data_little_likert)
cols_with_Little <- map_lgl(data, ~`%in%`("Little or no knowledge of topic", .x))
data_little <-  data[ , cols_with_Little]
data_little <- map_if(data_little,
is.character,
as.factor)
tally(data_little)
cols_with_Little <- map_lgl(data, ~`%in%`("Little or no knowledge of topic", .x))
data_little <-  data[ , cols_with_Little]
# BM # convert to factor
data_little <- map_if(data_little,
is.character,
as.factor)
# BM # plot
data_little_likert <-  likert(as.data.frame(data_little))
plot(data_little_likert)
#-----------------------------------------
# BM # find the cols with 'knowledge increased' etc
cols_with_knowledge <- map_lgl(data, ~`%in%`("Knowledge increased a great deal", .x))
data_knowledge <-  data[ , cols_with_knowledge]
# BM # convert to factor
data_knowledge <- map_if(data_knowledge,
is.character,
as.factor)
# BM # some cols don't have all the possible responses, so
# BM # we need to apply all the factor levels to all the cols. What is the max number of levels?
map_int(data_knowledge, ~length(levels(.x)))
# BM # ten, so we use a random col with 11 levels and
# BM # apply this to all:
data_knowledge <-
lapply(data_knowledge,
factor,
levels = levels(data_knowledge$Unix.Shell.Intimidating),
labels = levels(data_knowledge$Unix.Shell.Intimidating))
data_knowledge_likert <-  likert(as.data.frame(data_knowledge))
plot(data_knowledge_likert)
table(data$When.Taking.Survey)
data_when_taking_survey_tally <-
data %>%
group_by(When.Taking.Survey) %>%
tally() %>%
filter(!is.na(When.Taking.Survey)) %>%
arrange(desc(n))
x <- as.character(data_when_taking_survey_tally$When.Taking.Survey)
x1 <- strsplit(x, "^[^ ]*(?: [^ ]*){4}\\K ", perl=TRUE)
data_when_taking_survey_tally$When.Taking.Survey.tidy <-
sapply(x1, function(i) paste(i, collapse = "\n"))
ggplot(data_when_taking_survey_tally,
aes(reorder(When.Taking.Survey.tidy, n),
n)) +
geom_bar(stat = 'identity') +
#BM# added line break in axis title: \n
ggtitle("When are you taking\nthe post-workshop survey?") +
xlab("") +
ylab("n") +
coord_flip() +
theme_bw(base_size = 14)
table(data$Unix.Shell.Pre)
data_unix_shell_pre_tally <-
data %>%
group_by(Unix.Shell.Pre) %>%
tally() %>%
filter(!is.na(Unix.Shell.Pre)) %>%
arrange(desc(n))
#BM# we can tidy the text so it plots more prettily
x <- as.character(data_when_taking_survey_tally$When.Taking.Survey)
#BM# put sentence every 4 spaces and insert line break
x1 <- strsplit(x, "^[^ ]*(?: [^ ]*){4}\\K ", perl=TRUE)
#BM# update data frame with new column of tidy text
data_when_taking_survey_tally$When.Taking.Survey.tidy <-
sapply(x1, function(i) paste(i, collapse = "\n"))
ggplot(data_when_taking_survey_tally,
aes(reorder(When.Taking.Survey.tidy, n),
n)) +
geom_bar(stat = 'identity') +
#BM# added line break in axis title: \n
ggtitle("When are you taking\nthe post-workshop survey?") +
xlab("") +
ylab("n") +
coord_flip() +
theme_bw(base_size = 14)
cols_with_Agree <- map_lgl(data, ~`%in%`("Agree", .x))
data_agree <-  data[ , cols_with_Agree]
# BM # convert to factor
data_agree <- map_if(data_agree,
is.character,
as.factor)
data_agree_likert <-  likert(as.data.frame(data_agree))
plot(data_agree_likert)
# BM # find the cols with 'often' etc
cols_with_Often <- map_lgl(data, ~`%in%`("Often", .x))
data_often <-  data[ , cols_with_Often]
# BM # convert to factor
data_often <- map_if(data_often,
is.character,
as.factor)
data_often_likert <-  likert(as.data.frame(data_often))
plot(data_often_likert)
#-----------------------------------------
# BM # find the cols with 'little' etc
cols_with_Little <- map_lgl(data, ~`%in%`("Little or no knowledge of topic", .x))
data_little <-  data[ , cols_with_Little]
# BM # convert to factor
data_little <- map_if(data_little,
is.character,
as.factor)
# BM # plot
data_little_likert <-  likert(as.data.frame(data_little))
plot(data_little_likert)
# BM # find the cols with 'knowledge increased' etc
cols_with_knowledge <- map_lgl(data, ~`%in%`("Knowledge increased a great deal", .x))
data_knowledge <-  data[ , cols_with_knowledge]
# BM # convert to factor
data_knowledge <- map_if(data_knowledge,
is.character,
as.factor)
# BM # some cols don't have all the possible responses, so
# BM # we need to apply all the factor levels to all the cols. What is the max number of levels?
map_int(data_knowledge, ~length(levels(.x)))
# BM # ten, so we use a random col with 11 levels and
# BM # apply this to all:
data_knowledge <-
lapply(data_knowledge,
factor,
levels = levels(data_knowledge$Unix.Shell.Intimidating),
labels = levels(data_knowledge$Unix.Shell.Intimidating))
data_knowledge_likert <-  likert(as.data.frame(data_knowledge))
plot(data_knowledge_likert)
cols_with_knowledge <- map_lgl(data, ~`%in%`("Knowledge increased a great deal", .x))
data_knowledge <-  data[ , cols_with_knowledge]
data_knowledge <- map_if(data_knowledge,
is.character,
as.factor)
# Some of the columns don't have all the possible responses.
# We need to apply all the factor levels to all of the columns.
# What is the maximum number of levels?
map_int(data_knowledge, ~length(levels(.x)))
# The maximum level of numbers is 10.
# Use a random column with 11 levels and apply this to all:
data_knowledge <-
lapply(data_knowledge,
factor,
levels = levels(data_knowledge$Unix.Shell.Intimidating),
labels = levels(data_knowledge$Unix.Shell.Intimidating))
# Plot
data_knowledge_likert <-  likert(as.data.frame(data_knowledge))
plot(data_knowledge_likert)
# Find the columns with 'knowledge increased' etc
cols_with_knowledge <- map_lgl(data, ~`%in%`("Knowledge increased a great deal", .x))
data_knowledge <-  data[ , cols_with_knowledge]
data_knowledge <- map_if(data_knowledge,
is.character,
as.factor)
# Some of the columns don't have all the possible responses.
# We need to apply all the factor levels to all of the columns.
# What is the maximum number of levels?
map_int(data_knowledge, ~length(levels(.x)))
# The maximum level of numbers is 10.
# Use a random column with 11 levels and apply:
data_knowledge <-
lapply(data_knowledge,
factor,
levels = levels(data_knowledge$Unix.Shell.Intimidating),
labels = levels(data_knowledge$Unix.Shell.Intimidating))
# Plot
data_knowledge_likert <-  likert(as.data.frame(data_knowledge))
plot(data_knowledge_likert)
# Use a random column with 11 levels and apply:
data_knowledge <-
lapply(data_knowledge,
factor,
levels = levels(data_knowledge$Unix.Shell.Intimidating),
labels = levels(data_knowledge$Unix.Shell.Intimidating))
# Plot
data_knowledge_likert <-  likert(as.data.frame(data_knowledge))
plot(data_knowledge_likert)
# Use a random column with 11 levels and apply:
data_knowledge <-
lapply(data_knowledge,
factor,
levels = levels(data_knowledge$Unix.Shell.Intimidating),
labels = levels(data_knowledge$Unix.Shell.Intimidating))
# Plot
title <- "Learner Knowledge and Perception of Software Carpentry Tools"
data_knowledge_likert <-  likert(as.data.frame(data_knowledge))
plot(data_knowledge_likert)
table(data$New.Information)
data_new_information_tally <-
data %>%
group_by(New.Information) %>%
tally() %>%
filter(!is.na(New.Information)) %>%
#BM# remove column with no name on the plot
filter(New.Information != "") %>%
arrange(desc(n))
ggplot(data_new_information_tally,
aes(reorder(New.Information, n),
n)) +
geom_bar(stat = 'identity') +
xlab("How much of the info was new?") +
ylab("n") +
coord_flip() +
theme_bw(base_size = 14)
data_new_information_tally <-
data %>%
group_by(New.Information) %>%
tally() %>%
filter(!is.na(New.Information)) %>%
#Remove columns with no name on the plot
filter(New.Information != "") %>%
arrange(desc(n))
ggplot(data_new_information_tally,
aes(reorder(New.Information, n),
n)) +
geom_bar(stat = 'identity') +
xlab("How much of the information was new to you?") +
ylab("n") +
coord_flip() +
theme_bw(base_size = 14)
data_new_information_tally <-
data %>%
group_by(New.Information) %>%
tally() %>%
filter(!is.na(New.Information)) %>%
#BM# remove column with no name on the plot
filter(New.Information != "") %>%
arrange(desc(n))
ggplot(data_new_information_tally,
aes(reorder(New.Information, n),
n)) +
geom_bar(stat = 'identity') +
xlab("How much of the info was new?") +
ylab("n") +
coord_flip() +
theme_bw(base_size = 14)
data_new_information_tally <-
data %>%
group_by(New.Information) %>%
tally() %>%
filter(!is.na(New.Information)) %>%
#BM# remove column with no name on the plot
filter(New.Information != "") %>%
arrange(desc(n))
ggplot(data_new_information_tally,
aes(reorder(New.Information, n),
n)) +
geom_bar(stat = 'identity') +
xlab("How much of the info was new?") +
ylab("n") +
coord_flip() +
theme_bw(base_size = 14)
table(data$New.Information)
cols_with_Little <- map_lgl(data, ~`%in%`("Little or no knowledge of topic", .x))
data_little <-  data[ , cols_with_Little]
data_little <- map_if(data_little,
is.character,
as.factor)
title <- "Learner Self-Perception of Knowledge of Tools Covered"
data_little_likert <-  likert(as.data.frame(data_little))
plot(data_little_likert) + ggtitle(title)
table(data$New.Information)
cols_with_Little <- map_lgl(data, ~`%in%`("Little or no knowledge of topic", .x))
data_little <-  data[ , cols_with_Little]
data_little <- map_if(data_little,
is.character,
as.factor)
title <- "Learner Self-Reported Knowledge of Tools Covered"
data_little_likert <-  likert(as.data.frame(data_little))
plot(data_little_likert) + ggtitle(title)
#-----------------------------------------
# BM # find the cols with 'knowledge increased' etc
cols_with_knowledge <- map_lgl(data, ~`%in%`("Knowledge increased a great deal", .x))
data_knowledge <-  data[ , cols_with_knowledge]
# BM # convert to factor
data_knowledge <- map_if(data_knowledge,
is.character,
as.factor)
# BM # some cols don't have all the possible responses, so
# BM # we need to apply all the factor levels to all the cols. What is the max number of levels?
map_int(data_knowledge, ~length(levels(.x)))
# BM # ten, so we use a random col with 11 levels and
# BM # apply this to all:
data_knowledge <-
lapply(data_knowledge,
factor,
levels = levels(data_knowledge$Unix.Shell.Intimidating),
labels = levels(data_knowledge$Unix.Shell.Intimidating))
# BM # plot
data_knowledge_likert <-  likert(as.data.frame(data_knowledge))
plot(data_knowledge_likert)
plot(data$Worth, type = "density")
plot(data$Worth, type = "heat")
table(data$Pace)
table(data$New.Information)
table(data$New.Information)
table(data$New.Information)
cols_with_Little <- map_lgl(data, ~`%in%`("Little or no knowledge of topic", .x))
data_little <-  data[ , cols_with_Little]
data_little <- map_if(data_little,
is.character,
as.factor)
title <- "Figure 3: Learner Self-Reported Knowledge of Tools Covered"
data_little_likert <-  likert(as.data.frame(data_little))
plot(data_little_likert) + ggtitle(title)
